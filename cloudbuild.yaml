steps:
  - name: python
    entrypoint: pip
    args: ["install", "-r", "requirements.txt", "--user"]

  # Run unit tests
  - name: python
    entrypoint: python
    args: ["-m", "pytest", "--junitxml=${SHORT_SHA}_test_log.xml"]

  # Docker Build
  - name: "gcr.io/cloud-builders/docker"
    args:
      [
        "build",
        "-t",
        "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/myimage:${SHORT_SHA}",
        ".",
      ]

  # Docker push to Google Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    args:
      [
        "push",
        "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/myimage:${SHORT_SHA}",
      ]

  # Deploy to Cloud Run
  - name: google/cloud-sdk
    args:
      [
        "gcloud",
        "run",
        "deploy",
        "helloworld-${SHORT_SHA}",
        "--image=${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/myimage:${SHORT_SHA}",
        "--region",
        "${LOCATION}",
        "--platform",
        "managed",
        "--allow-unauthenticated",
      ]
options:
  logging: CLOUD_LOGGING_ONLY

# Save test logs to Google Cloud Storage
# artifacts:
#   objects:
#     location: gs://${_BUCKET_NAME}/
#     paths:
#       - ${SHORT_SHA}_test_log.xml

# Store images in Google Artifact Registry
images:
  - ${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/myimage:${SHORT_SHA}
